name: CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- grant execute permission for Gradlew ---
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build Backend JAR
        run: ./gradlew clean bootJar -x test

      - name: Build Frontend (with Yarn)
        working-directory: frontend
        run: |
          npm install -g yarn
          rm -rf node_modules package-lock.json || true
          yarn install --frozen-lockfile --ignore-optional
          yarn add --dev @rollup/rollup-linux-x64-gnu
          yarn build

      # ----------------------------
      # 1) Bastion(Jump) 배포 & 재시작
      # ----------------------------
      - name: Deploy & Restart Backend via Bastion
        env:
          BASTION_KEY:        ${{ secrets.BASTION_SSH_PRIVATE_KEY }}
          FRONT_SSH_USER:     ${{ secrets.FRONT_SSH_USER }}
          FRONT_SSH_HOST:     ${{ secrets.FRONT_SSH_HOST }}
          BACKEND_SSH_USER:   ${{ secrets.BACKEND_SSH_USER }}
          BACKEND_PRIVATE_IP: ${{ secrets.BACKEND_PRIVATE_IP }}
          DB_PRIVATE_IP:      ${{ secrets.DB_PRIVATE_IP }}
          DB_PORT:            ${{ secrets.DB_PORT }}
          DB_USER:            ${{ secrets.DB_USER }}
          DB_PASSWORD:        ${{ secrets.DB_PASSWORD }}
          DB_NAME:            ${{ secrets.DB_NAME }}
        run: |
          # 1) bastion 키 파일 생성
          echo "$BASTION_KEY" > bastion.pem
          chmod 600 bastion.pem

          # 2) 로컬 → Bastion(프론트엔드) 업로드
          scp -i bastion.pem \
              -o StrictHostKeyChecking=no \
              build/libs/*.jar \
              $FRONT_SSH_USER@$FRONT_SSH_HOST:/tmp/app.jar

          # 3) Bastion → Backend(사설 IP)로 점프해서 배포·재시작·마이그레이션
          ssh -i bastion.pem \
              -o StrictHostKeyChecking=no \
              -J $FRONT_SSH_USER@$FRONT_SSH_HOST \
              $BACKEND_SSH_USER@$BACKEND_PRIVATE_IP << 'EOF'
            sudo mv /tmp/app.jar /opt/law-n-road-release/app.jar
            sudo systemctl daemon-reload
            sudo systemctl restart law-n-road-backend.service

            # DB 마이그레이션 (백엔드에서 DB 사설 IP로 접속)
            mysql -h "$DB_PRIVATE_IP" -P "$DB_PORT" \
                  -u "$DB_USER" -p"$DB_PASSWORD" \
                  "$DB_NAME" < /opt/law-n-road-release/db/migrations/init.sql
          EOF

      # ----------------------------
      # 2) 프론트엔드 정적 파일 배포
      # ----------------------------
      - name: Deploy Frontend Artifact
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.FRONT_SSH_HOST }}
          username: ${{ secrets.FRONT_SSH_USER }}
          key: ${{ secrets.FRONT_SSH_PRIVATE_KEY }}
          port: 22
          source: "frontend/dist/"
          target: "/opt/law-n-road-release/frontend/"

      - name: Reload Nginx on Frontend
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.FRONT_SSH_HOST }}
          username: ${{ secrets.FRONT_SSH_USER }}
          key: ${{ secrets.FRONT_SSH_PRIVATE_KEY }}
          script: sudo systemctl reload nginx

      - name: Notify Slack (도로의-판정단)
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,commit,author,action,message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_ROAD }}
